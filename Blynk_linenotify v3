
#define BLYNK_PRINT Serial
#include <WiFi.h>
#include <WiFiClient.h>
#include <WiFiClientSecure.h>
#include <BlynkSimpleEsp32.h>
#include <esp_task_wdt.h>
#include "ACS712.h"
#include <TridentTD_LineNotify.h>
#include <NTPClient.h>

char auth[] = "Jq5gsocb_wWPb-tcPJm6QPjIYYHgUtcB"; //ใส่ให้ตรงกับ app blynk
#define LINE_TOKEN "iJrVSp8nL1sOeTwBvI8LJFlj23QJgFtVPgMzR3yi8mm" //ใส่ให้ตรงกับ app line

// Your WiFi credentials.
// Set password to "" for open networks.
char ssid[] = "TESTESP";            //ใส่ชื่อ WIFI 
char pass[] = "a1234567";           //ใส่รหัส WIFI 
unsigned int current_setting = 900; //ตั้งค่ากระแสสูงสุด ปรับให้เข้ากับหน้างาน หน่วยเป็น มิลลิแอมป์

// Arduino UNO has 5.0 volt with a max ADC value of 1023 steps
// ACS712 5A  uses 185 mV per A
// ACS712 20A uses 100 mV per A
// ACS712 30A uses  66 mV per A
// ESP 32 example (requires resistors to step down the logic voltage)
ACS712  ACS(A0, 5.0, 4095, 100);

//8 seconds WDT
#define WDT_TIMEOUT 8
String _time;
WiFiUDP ntpUDP;
const long offsetTime = 25200;       //  7*60*60 = 25200
NTPClient timeClient(ntpUDP, "pool.ntp.org", offsetTime);

BlynkTimer timer;
//WidgetLED led(V1);
char line_status=0;
char line_alert= 0;
unsigned int current = 0;
void timerEvent()
{

  if(digitalRead(5)==LOW)
  {
    //led.on(); 
    Blynk.virtualWrite(V0, "เปิดไฟฟ้า"); 
    if(line_status==0)
     {
      line_status=1;
      LINE.notify("เปิดไฟฟ้า เวลา "+String(_time));  
     }
  }
  else{
    //led.off();
    Blynk.virtualWrite(V0, "ปิดไฟฟ้า"); 
    if(line_status==1)
     { 
      line_status=0;
      LINE.notify("ปิดไฟฟ้า เวลา "+String(_time));   
     }
  }

 current = 0;
 for(int i=0;i<50;i++)
  {
    current += ACS.mA_AC();
  }
 current=current/50; 
 Blynk.virtualWrite(V2,current); 
 if(digitalRead(5)==LOW)
  {
   if(current < current_setting && line_alert==0)
    {
     line_alert=1;
     LINE.notify("ระบบไฟฟ้ามีปัญหา ณ เวลา "+String(_time));       
    }         
  }
   if(current >= current_setting && line_alert==1)
    {
    if(line_alert==1)
     {
      line_alert=0;
      LINE.notify("ระบบไฟฟ้าปกติ ณ เวลา "+String(_time));  
     }      
    }   
}

BLYNK_WRITE(V3)
{
  current_setting = param.asInt();
}

void setup()
{
  // Debug console
  Serial.begin(9600);
  WiFi.begin(ssid, pass);
  Serial.println("");
  Serial.print("Connecting");
  while (WiFi.status() != WL_CONNECTED) {
    Serial.print(".");
    delay(500);
  };
  Blynk.begin(auth, ssid, pass);
  
  esp_task_wdt_init(WDT_TIMEOUT, true); //enable panic so ESP32 restarts
  esp_task_wdt_add(NULL); //add current thread to WDT watch

  timer.setInterval(2000L,timerEvent); 
  LINE.setToken(LINE_TOKEN);
  timeClient.begin();
}

void loop()
{  
   timeClient.update();
   if(timeClient.getHours()<10)
   {
     _time = "0" + String(timeClient.getHours())+":";
   }
   else{
     _time = String(timeClient.getHours())+":";
   }
   if(timeClient.getMinutes()<10)
   {
     _time += "0" + String(timeClient.getMinutes());
   }
   else{
    _time += String(timeClient.getMinutes()) +"น";
   }
  if(WiFi.status() != WL_CONNECTED)
  { 
    ESP.restart();
    WiFi.begin(ssid, pass);
  }
  Blynk.run();
  esp_task_wdt_reset();
  timer.run();
  Blynk.virtualWrite(V3, current_setting);
 
}
